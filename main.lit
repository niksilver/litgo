@title Litgo - A literate programming processor written in Go

@code_type Go .go
@comment_type // %s


@s Application structure

--- main.go
package main

import (
    @{Imports}
)

@{Package level declarations}

@{Functions}
---


@s Basic design

Initially we just want to process something through a markdown
processor.

--- Imports
"fmt"
"github.com/russross/blackfriday"
---

--- Functions
func main() {
    input := []byte("# Hello world\n\nThis is my other literate document")
	output := blackfriday.Run(input)
	fmt.Println(string(output))
}

---


@s Processing content: Basic structure

We start with a slice of bytes (or input) but it will be processed
line by line, as strings.

We will have a Processing interface, which is anything that processes
a line.

Each line will be received for processing without its end of line characters.

--- Imports +=
"strings"
"bufio"
---

--- Package level declarations
type processing interface {
    proc(string)
}

---

--- Functions +=
func processContent(c []byte, p processing) {
    r := strings.NewReader(string(c))
    sc := bufio.NewScanner(r)
    for sc.Scan() {
        p.proc(sc.Text())
    }
}

---

For the purposes of both testing and ease of developing our application
we need a generic way of reacting to lines. The process is:

    Line ->    Code processor    ->  Markdown processor
            (May add more lines,
             or drop this line,
             or change the input
             in other ways)

The code processor, which is `proc` in the code above,
should just pass through any markdown, but it
will need to process special commands and it will need to keep a
track of the code as it is assembled in non-linear order.
The markdown will be accumulated in the `processing` state.

--- Package level declarations +=
type state struct {
    markdown strings.Builder
    lineNum int
    @{More state fields}
}
---

--- Functions +=
func newState() state {
    return state{
        @{Required state initialisers}
    }
}

func (s *state) proc(line string) {
    s.lineNum ++
    @{Collect lines in code chunks}
    @{Send surviving lines to markdown}
}
---


@s Processing content: Warnings

As part of our evolving processing state we will collect warnings,
such as a chunk appearing without a name.

--- Package level declarations +=
type warning struct {
    line int
    msg string
}

---

--- More state fields
warnings []warning
---


@s Processing content: Collect lines in code chunks

Code chunks start with three backticks, a space, and a name.
They end with three backticks.
Anything within the backticks is to be generated code, and that code
will go into a map, from name to code.
We'll assemble the chunks later.

--- More state fields +=
inChunk bool
chunkName string
code map[string]strings.Builder
---

--- Required state initialisers
code: make(map[string]strings.Builder),
---

--- Collect lines in code chunks
if s.inChunk && line == "```" {
    s.inChunk = false
} else if s.inChunk {
    b := s.code[s.chunkName]
    b.WriteString(line + "\n")
    s.code[s.chunkName] = b
} else if !s.inChunk && strings.HasPrefix(line, "```") {
    s.chunkName = strings.TrimSpace(line[3:])
    s.code[s.chunkName] = strings.Builder{}
    s.inChunk = true
}
---


@s Processing content: Send surviving lines to markdown

--- Send surviving lines to markdown
s.markdown.WriteString(line + "\n")
---

